---
title: "DGE_scRNAseq"
format: html
editor: visual
---

## DGE scRNAseq:

```{r}
install.packages("Seurat")
install.packages("UpSetR")
install.packages("ggplot2")
```

### Load libraries:

```{r}

library(Seurat)
library(dplyr)
```

### Load data:

```{r}
count_matrix_file <-"count_matrix_RRRM2_Femur_BM_FLT_LAR_OLD_FO19_Gene.csv"
metadata_file <- "metadata_RRRM2_Femur_BM_FLT_LAR_OLD_FO19_Gene_annotated.csv"
```

```{r}
# Load the data
setwd("~/Documents/Dokumenty Krystian/NASA_internship_2024-2025/scRNAseq/test/DGE_plots_test")
counts <- read.csv(count_matrix_file, row.names = 1)
metadata <- read.csv(metadata_file, row.names = 1)
```

### Check if data files have matching rows:

```{r}
print(unique(metadata$scoreCT))
```

```{r}
# Ensure if row names match:
if (!all(rownames(metadata) == colnames(counts))) {
  stop("Everything is fine!")
}
```

### Seurat analysis - genes in different cell types in one data:

```{r}
sample_name <- "name"
```

```{r}
library(Seurat)
library(dplyr)

# Create Seurat object
seurat_obj <- CreateSeuratObject(counts = counts, meta.data = metadata)

# Preprocessing
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:10)

# Assign scoreCT explicitly to Seurat object metadata
seurat_obj$scoreCT <- metadata$scoreCT

# Check if scoreCT exists and print unique groups
if (!"scoreCT" %in% colnames(seurat_obj@meta.data)) {
  stop("The column 'scoreCT' does not exist in the metadata!")
}
print(unique(seurat_obj$scoreCT))  # View groups in scoreCT

# Initialize an empty list to store results
dge_results <- list()

# Loop to analyze every group at the same time
groups <- unique(seurat_obj$scoreCT)  # Ensure groups are properly assigned
for (i in 1:(length(groups) - 1)) {
  for (j in (i + 1):length(groups)) {
    group1 <- groups[i]
    group2 <- groups[j]
    
    # Print current comparison
    print(paste("Comparing", group1, "vs", group2))
    
    # Subset data for the two groups
    subset_obj <- subset(seurat_obj, subset = scoreCT %in% c(group1, group2))
    
    # Set the identities of the cells in subset_obj
    subset_obj <- SetIdent(subset_obj, value = "scoreCT")  # Use SetIdent instead of Idents<-

    # Perform DGE analysis:
    dge <- FindMarkers(
      subset_obj,
      ident.1 = group1,
      ident.2 = group2,
      test.use = "wilcox",
      logfc.threshold = 0.25
    )
    dge_results[[paste(group1, "vs", group2)]] <- dge
  }
}


#check if DGE_results folder exists, this will be place for DGE storage:
if (!dir.exists("DGE_Results")) {
  dir.create("DGE_Results")
}


#Save file:
for (comparison in names(dge_results)) {
  write.csv(
    dge_results[[comparison]],
    file = paste0("DGE_Results/DGE_", sample_name, "_", gsub(" ", "_", comparison), ".csv"),
    row.names = TRUE
  )
}
print("DGE results saved to the 'DGE_Results' directory.")
```

### UpSet plots generation:

```{r}
library(UpSetR)
library(gridExtra)

# check if significant genes are in dge_results:
significant_genes <- lapply(dge_results, function(result) {
  # extract significant genes based on adjusted p-values:
  significant <- rownames(result[result$p_val_adj < 0.05, ])
  
  # convert to character;
  return(as.character(significant))  
})

# Convert to vector:
gene_sets <- fromList(significant_genes)

# save file:
if (!dir.exists("UpSet_Plots")) {
  dir.create("UpSet_Plots")
}

png(
  filename = paste0("UpSet_Plots/UpSet_", sample_name, ".png"),
  width = 20, height = 15, units = "in", res = 300
)

# Generate the plot;
upset(
  gene_sets,
  nsets = length(significant_genes),
  order.by = "freq",
  main.bar.color = "dodgerblue",
  sets.bar.color = "skyblue",
  text.scale = c(1.2, 0.8, 1, 1, 1.5, 1.5))#axis, set names, 



dev.off()

print("UpSet plot saved to the 'UpSet_Plots' directory.")

```

Violin plots:
